/*Runtime Beat 100% */
public class Solution {
    public int WaysToSplitArray(int[] nums) {
        /*List<long> A = new List<long>();
        A.Add(nums[0]);
        for (int i=1; i<nums.Length; i++) A.Add(nums[i]+A[A.Count()-1]); 
        int count =0;
        for (int i=0; i<nums.Length-1; i++)
            count+= A[i] >= (A[nums.Length-1]-A[i]) ? 1 : 0;*/
        long sum = 0, presum = 0;
        int count = 0;
        for (int i=0; i<nums.Length; i++) sum+=nums[i];
        for (int i=0; i<nums.Length-1; i++)
        {
            presum+=nums[i];
            count += presum >= (sum - presum) ? 1 : 0;
        }
        return count;
    }
}
/*Memory Beat 100%*/
public class Solution {
    public int WaysToSplitArray(int[] nums) {
        List<long> A = new List<long>();
        A.Add(nums[0]);
        for (int i=1; i<nums.Length; i++) A.Add(nums[i]+A[A.Count()-1]); 
        int count =0;
        for (int i=0; i<nums.Length-1; i++)
            count+= A[i] >= (A[nums.Length-1]-A[i]) ? 1 : 0;
        return count;
    }
}
/*
https://leetcode.com/problems/number-of-ways-to-split-array/description/
*/
